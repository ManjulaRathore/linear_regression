# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijKiOEwzXLTsCdhhbFjsaNLKvCWmjdaX
"""

import numpy as np
import pandas as pd
import sklearn
import seaborn as sns
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

"""**Import interactive shell magic command which will help us print many statements on the same line**"""

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = 'all'

"""**Import the Boston Housing dataset from sklearn library.**"""

from sklearn import datasets
Boston = datasets.load_boston()
Boston.feature_names

"""**exploratory analysis such as- printing the features,  the label shape of the data etc**"""

print(Boston.DESCR)
Boston.keys()
Boston.data.shape
Boston.target

"""**Convert the original array data into a dataframe and append the column names.
Add a new variable in the dataframe for the target ( or label) variable**
"""

boston_df = pd.DataFrame(Boston.data, columns= Boston.feature_names)
boston_df.head()
boston_df['House_Price'] = Boston.target
boston_df.head()
boston_df.describe()

"""**building a linear regression model it may be helpful to generate the correlation matrix and then the correlation heatmap using the seaborn library**"""

x = boston_df.corr()
plt.subplots(figsize = (20,20))
sns.heatmap(x, cmap= 'RdYlGn', annot=True)
plt.show()

"""**Create features and labels using Pandas  ‘.drop() ‘ method to drop certain variables. In this case we are dropping the house price as this is the label**"""

x = boston_df.drop('House_Price', axis = 1)
y = boston_df['House_Price']
x.head()
y.head()

"""**Split the data into the training and test datasets**"""

train_x, test_x, train_y, test_y = train_test_split(x,y,test_size =0.25, random_state=1)
train_x.shape
test_x.shape
train_y.shape
test_y.shape

"""**Instantiate– import the model object and create an instance of the model**"""

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm

"""**Fit – Fit the model instant on the training data using ‘ .fit() ‘ method.**"""

lm.fit(train_x,train_y)

"""**Predict– Predict using the model instant and training done on the training data using ‘ .predict() ‘ method. **"""

predict = lm.predict(test_x)

"""** important things such as the coefficients of the parameters using the fitted object methods**"""

print(lm.coef_)
df_m = pd.DataFrame({'features':x.columns, 'coeff': lm.coef_})
df_m = df_m.sort_values(by = ['coeff'])
df_m

"""**Let’s now generate some of the model performance metrics  such as R2, MSE and MAE. **"""

print('R2 value for test data = ', np.round(lm.score(test_x,test_y)*100,0))
print('R2 value for train data = ', np.round(lm.score(train_x,train_y)*100,0))